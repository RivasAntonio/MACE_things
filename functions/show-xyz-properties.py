#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from ase.io import read
import matplotlib.pyplot as plt
import argparse
import numpy as np
from ase.data import atomic_numbers

# Parsear argumentos de l칤nea de comandos
parser = argparse.ArgumentParser(description='Graficar propiedades desde un archivo .xyz y mostrar estad칤sticas')
parser.add_argument('xyz_file', type=str, help='Ruta al archivo .xyz')
args = parser.parse_args()

# Ruta del archivo .xyz
xyz_file = args.xyz_file

# Leer el archivo .xyz
data = read(xyz_file, index=':')

# Funci칩n para extraer elementos 칰nicos (similar a get_elements_from_xyz.py)
def extraer_elementos_xyz(estructuras):
    """
    Extrae elementos 칰nicos de las estructuras XYZ usando ASE.
    Cuenta cada elemento una sola vez por estructura.
    """
    elementos_por_estructura = {}
    
    for estructura in estructuras:
        # Obtener elementos 칰nicos en esta estructura
        elementos_estructura = set(estructura.get_chemical_symbols())
        
        # Contar cada elemento 칰nico una vez por estructura
        for elemento in elementos_estructura:
            elementos_por_estructura[elemento] = elementos_por_estructura.get(elemento, 0) + 1
    
    return elementos_por_estructura

# Funci칩n para an치lisis de n칰mero de 치tomos (similar a numatoms.py)
def analizar_num_atomos(estructuras):
    """
    Analiza estad칤sticas del n칰mero de 치tomos por estructura.
    """
    num_atomos = [len(atoms) for atoms in estructuras]
    media = np.mean(num_atomos)
    minimo = np.min(num_atomos)
    maximo = np.max(num_atomos)
    
    return num_atomos, media, minimo, maximo

# An치lisis de elementos 칰nicos
elementos_por_estructura = extraer_elementos_xyz(data)
total_estructuras = len(data)

# An치lisis de n칰mero de 치tomos
num_atoms, media_atomos, min_atomos, max_atomos = analizar_num_atomos(data)

# Mostrar estad칤sticas de elementos
print(f"\n游늵 AN츼LISIS DE ELEMENTOS")
print(f"Total de estructuras encontradas: {total_estructuras}")
print("\nElementos encontrados con sus porcentajes:")
print("=" * 50)

elementos_ordenados = sorted(elementos_por_estructura.keys())
for elemento in elementos_ordenados:
    count = elementos_por_estructura[elemento]
    porcentaje = (count / total_estructuras) * 100
    numero_atomico = atomic_numbers.get(elemento, 0)
    print(f"{elemento} (Z={numero_atomico}): {count}/{total_estructuras} estructuras ({porcentaje:.1f}%)")

print("\n" + "=" * 50)
print(f"Elementos 칰nicos encontrados: {elementos_ordenados}")
print(f"Total de elementos diferentes: {len(elementos_ordenados)}")

# Mostrar estad칤sticas de n칰mero de 치tomos
print(f"\n游늵 AN츼LISIS DE N칔MERO DE 츼TOMOS")
print(f"Archivo analizado: {xyz_file}")
print(f"N칰mero total de estructuras: {total_estructuras}")
print(f"N칰mero medio de 치tomos por estructura: {media_atomos:.2f}")
print(f"N칰mero m칤nimo de 치tomos en una estructura: {min_atomos}")
print(f"N칰mero m치ximo de 치tomos en una estructura: {max_atomos}")
print("=" * 50)

# Extraer el n칰mero de 치tomos y la energ칤a por 치tomo
energy_per_atom = [atoms.get_potential_energy() / len(atoms) for atoms in data]

# Extraer las fuerzas y los stresses totales
forces = [np.linalg.norm(atoms.get_forces()) for atoms in data]
stresses = [np.linalg.norm(atoms.get_stress()) for atoms in data]

# Crear una figura con 6 subfiguras (3 filas, 2 columnas)
fig, axs = plt.subplots(3, 2, figsize=(12,8))

# Fila 1: Energ칤a por 치tomo
axs[0,0].scatter(energy_per_atom, energy_per_atom)
axs[0,0].plot(energy_per_atom, energy_per_atom, color='black', linestyle='--', label='x = y')
axs[0,0].set_xlabel('Energ칤a por 츼tomo (eV)')
axs[0,0].set_ylabel('Energ칤a por 츼tomo (eV)')
axs[0,0].legend()

axs[0,1].hist(energy_per_atom, bins=20, color='blue', alpha=0.7, edgecolor='black')
axs[0,1].set_xlabel('Energ칤a por 츼tomo (eV)')
axs[0,1].set_ylabel('Frecuencia')

# Fila 2: Fuerzas
axs[1,0].scatter(forces, forces)
axs[1,0].plot(forces, forces, color='black', linestyle='--', label='x = y')
axs[1,0].set_xlabel('Fuerzas Totales (eV/칀)')
axs[1,0].set_ylabel('Fuerzas Totales (eV/칀)')
axs[1,0].legend()

axs[1,1].hist(forces, bins=20, color='green', alpha=0.7, edgecolor='black')
axs[1,1].set_xlabel('Fuerzas Totales (eV/칀)')
axs[1,1].set_ylabel('Frecuencia')

# Fila 3: Stresses
axs[2,0].scatter(stresses, stresses)
axs[2,0].plot(stresses, stresses, color='black', linestyle='--', label='x = y')
axs[2,0].set_xlabel('Stresses Totales (eV/칀췁)')
axs[2,0].set_ylabel('Stresses Totales (eV/칀췁)')
axs[2,0].legend()

axs[2,1].hist(stresses, bins=20, color='orange', alpha=0.7, edgecolor='black')
axs[2,1].set_xlabel('Stresses Totales (eV/칀췁)')
axs[2,1].set_ylabel('Frecuencia')

# Ajustar el espaciado entre subgr치ficos
plt.tight_layout()
plt.show()

# Mostrar informaci칩n adicional de elementos como texto
print(f"\n游늳 RESUMEN DE GR츼FICOS GENERADOS:")
print(f"- Energ칤a por 치tomo: {len(energy_per_atom)} puntos")
print(f"- Energ칤a por 치tomo: rango [{min(energy_per_atom):.3f}, {max(energy_per_atom):.3f}] eV")
print(f"- Fuerzas totales: rango [{min(forces):.3f}, {max(forces):.3f}] eV/칀")
print(f"- Stresses totales: rango [{min(stresses):.3f}, {max(stresses):.3f}] eV/칀췁")
print(f"- N칰mero de 치tomos: rango [{min_atomos}, {max_atomos}] 치tomos")